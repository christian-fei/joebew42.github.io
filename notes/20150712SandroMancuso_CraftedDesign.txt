# Some clarification about a clean architecture design

## Main questions

- What our software actually does ?

    through explicit verbs, Action(s)

- What our software is about ?

    through nouns, Model(s)

- How do we expose the features of our system ?

    through a Delivery Mechanism(s)

## What about the structure of the application?

We generally observe two main concepts that emerges from an application:

- The business model
- The delivery mechanism

### The business model

The first concept tell us about the business model of our application, what is
the behaviour of our application? Which are the actions that we can invoke on it?
And which are the entities? And how them collaborates each other?

- Action(s) and Model(s) goes here.

### The delivery mechanism

The second concept tell us how we expose the application to the outside world, and
how we control the workflow. A business model can have more than one delivery mechanism.

## What about the Hexagonal Architecture or Ports and Adapters pattern?

Yes, basically its the same concept described in a easy way ;)

## How our application can be structured in real life examples ?

src/
   /core          <---- The business model
      /models     <---- What our software is about
      /actions    <---- What our software actually does
   /web           <---- An HTTP delivery mechanism based on a REST API
   /cl            <---- A command line delivery mechanism

## An example of an outside-in interaction workflow

Controller -> Action -> Domain Service -> Repository
                                       -> Entity

### What are Action, Service and Entity about ?

- Action

  Defines the action our domain model will be asked to perform

- Domain Service

  Behaviour related to a group of entitiies

- Entity

  Behaviour related to the data of a single entity

### What we can observe ?

What does our system           ------------->  How does our system

Higher number of collaborators ------------->  Few or no collaborators

Behaviour is determined by
  the interaction with         ------------->  No interaction
    collaborators

  We should use Mocks          ------------->  No mocks

In general, the more outside we are the more the high-level behaviour is expressed through
clear actions (e.g. CreateNewUser, MakeNewOrder, MakePayment, etc ...). On the other
hand, the more inside we are the more low-level behaviour is expresses through concrete
classes implementation (e.g. MongoDBUserRepository, ElastiSearchProductsSearchIndex, etc ...)

# What our software is about ?

Our software is about entities that interact one each other, we can express them by nouns,
e.g. models/product, models/book, models/order, etc ... Or more specific, if needed,
e.g. models/products/toy, models/products/cellphone, etc ...

# Where do I have to look to know what our software actually does ?

We can better express what our software does by making explicit the actions which we can
perform on our system, with verbs (e.g. actions/makeOrder, actions/createUser, actions/updateOrder, etc ...)

# What about technical concerns like third party libraries integration ?

This is a kind of topic that has no valuable information regarding business, so, we are likely to
push them all in a dedicated bucket that we can call "infrastructure", some example:

infrastructure/repository/mysqlUserRepository, infrastructure/payments/payPalPaymentGateway
