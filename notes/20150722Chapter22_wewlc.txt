# How to deal with Monster Methods

## What is a Monster Method

If you ever seen a thousands lines of code long method, complex and
not very readable or clear, of course, that was a Monster Method. In
this situation is also difficult or impossible write tests for it.

## Variety of Monsters

- *Bulleted Methods*

  A bulleted method is a method with nearly no indentation. It is just
  a sequence of code chunks that reminds you of a bulleted list. Some
  of the code in the chunks might be indented, but the method itself
  isn't dominated by indentation.

  What to do:

  Just try to extract sections as method. That is not always an easy
  way, because sometime a temporary variable used in a section is also
  used in another section.

- *Snarled Methods*

  A snarled method is a method dominated by a single large, indented
  section. The simplest case is a method that has one large
  conditional statement

- *Tackling Monsters with Automated Refactoring Support*

  When doing automated refactoring without tests, use the tool
  exclusively. After a series of automated refactorings, you can often
  get tests in place that you can use to verify any manual edits that
  you make.

  - Key goals to keep in mind during extractions:

    1. To separate logic from awkward dependencies
    2. To introduce seams that make it easier to get tests in place
       for more refactoring

- *Introduce Sensing Variable*

  Sometimes it helps to add a variable to a class and use it to sense
  conditions in the method that we want to refactor. When we've done
  the refactoring that we need to do, we can get rid of that variable.

  It's like introduce a spy mechanism directly into application code.

- *Extract what you know*

  Another strategy that we can use when we are working with monster
  methods is to start small and find little pieces of code that we can
  extract confidently without tests, and then add tests to cover them.
  Okay, I need to say this in a different way because everyone's idea
  of "little" is different. When I say "little" I mean two or three
  lines, five, at most, a chunk of code that you can easily name.
  The key thing to pay attention to when you do these little
  extractions is the coupling count of the extraction.
  The coupling count is the number of values that pass into and out of
  the method you are extracting

- *Gleaning dependencies*

  Sometimes there is code in a monster method that is kind of
  secondary to the method's main purpose.

  What to do ?

  You write tests for the logic that you need to preserve. Afterward,
  you extract things that the tests do not cover. When you do this,
  you can at least have confidence that you are preserving the
  important behavior.

  Gleaning Dependencies is particularly powerful when critical
  behavior is tangled with other behavior. When you have solid tests
  for the critical behavior, you can do a lot of editing that
  technically isnâ€™t all covered by tests, but it helps you to preserve
  key behavior.
